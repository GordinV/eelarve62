<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
  <grid>
    <sql>WITH doc_type AS (
                     SELECT id
                     FROM libs.library
                     WHERE library = 'DOK'
                       AND kood = 'JOURNAL'
                 ),
                  rekv_ids as (
                      SELECT rekv_id FROM get_asutuse_struktuur($1::INTEGER)
                  )
             SELECT to_char(d.created, 'DD.MM.YYYY HH:MI')    AS created,
                    to_char(d.lastupdate, 'DD.MM.YYYY HH:MI') AS lastupdate,
                    s.nimetus                                 AS status,
                    d.id                                      AS id,
                    j.kpv                                     AS kpv,
                    jid.number,
                    j.id                                      AS journalid,
                    j.rekvId,
                    j.asutusid,
                    month(j.kpv) :: INTEGER                   AS kuu,
                    year(j.kpv) :: INTEGER                    AS aasta,
                    regexp_replace(regexp_replace(coalesce(j.selg, ''), '[&#34;/]', ' ', 'g'), '/n/r', '',
                                   'g') :: VARCHAR(254)       AS selg,
                    COALESCE(j.dok, '') :: VARCHAR(50)        AS dok,
                    COALESCE(j1.objekt, '') :: VARCHAR(20)    AS objekt,
                    regexp_replace(regexp_replace(replace(coalesce(j.muud, ''), chr(13), ' '), '[&#34;/]', ' ', 'g'),
                                   '/n/r', '',
                                   'g') :: VARCHAR(254)       AS muud,
                    j1.deebet,
                    COALESCE(j1.lisa_d, '') :: VARCHAR(20)    AS lisa_d,
                    j1.kreedit,
                    COALESCE(j1.lisa_k, '') :: VARCHAR(20)    AS lisa_k,
                    j1.summa,
                    j1.summa                                  AS valsumma,
                    'EUR' :: VARCHAR(20)                      AS valuuta,
                    1 :: NUMERIC(12, 6)                       AS kuurs,
                    COALESCE(j1.kood1, '') :: VARCHAR(20)     AS kood1,
                    COALESCE(j1.kood2, '') :: VARCHAR(20)     AS kood2,
                    COALESCE(j1.kood3, '') :: VARCHAR(20)     AS kood3,
                    COALESCE(j1.kood4, '') :: VARCHAR(20)     AS kood4,
                    COALESCE(j1.kood5, '') :: VARCHAR(20)     AS kood5,
                    COALESCE(j1.proj, '') :: VARCHAR(20)      AS proj,
                    COALESCE(ltrim(rtrim(a.nimetus)) || ' ' || ltrim(rtrim(a.omvorm)),'') :: VARCHAR(120) AS asutus,
                    COALESCE(j1.tunnus, '') :: VARCHAR(20)    AS tunnus,
                    COALESCE(u.ametnik, '') :: VARCHAR(120)   AS kasutaja,
                    ltrim(rtrim(r.nimetus)):: VARCHAR(254)    AS rekvAsutus
             FROM docs.journal j
                      LEFT JOIN libs.asutus a ON a.id = j.asutusid
                      LEFT OUTER JOIN ou.userid u ON u.id = j.userid,
                  doc_type,
                  docs.doc D,
                  docs.journal1 j1,
                  docs.journalid jid,
                  ou.rekv r,
                  libs.library S
             WHERE D.status &lt;&gt; 3
               AND d.doc_type_id = doc_type.id
               AND j.id = jid.journalid
               AND j.id = j1.parentid
               AND D.id = j.parentid
               and r.id = j.rekvid
               AND S.kood = D.status :: TEXT
               AND S.library = 'STATUS'
               and d.rekvid in (select rekv_id from rekv_ids)</sql>
    <alias>curJournal</alias>
  </grid>
  <select>
    <sql>SELECT d.id,
                         $2 :: INTEGER                                                                      AS userid,
                         d.docs_ids,
                         (to_char(created, 'DD.MM.YYYY HH:MI:SS')) :: TEXT                                  AS created,
                         (to_char(lastupdate, 'DD.MM.YYYY HH:MI:SS')) :: TEXT                               AS lastupdate,
                         d.bpm,
                         trim(l.nimetus)                                                                    AS doc,
                         trim(l.kood)                                                                       AS doc_type_id,
                         trim(s.nimetus)                                                                    AS status,
                         d.status                                                                           AS doc_status,
                         jid.number                                                                         AS number,
                         j.rekvId,
                         j.kpv                                                                              AS kpv,
                         j.asutusid,
                         trim(j.dok) :: VARCHAR(120)                                                        AS dok,
                         j.selg,
                         j.muud,
                         j.objekt :: VARCHAR(254),
                         (SELECT sum(j1.summa) AS summa
                          FROM docs.journal1 AS j1
                          WHERE parentid = j.id)                                                            AS summa,
                         asutus.regkood,
                         trim(asutus.nimetus)                                                               AS asutus,
                         u.ametnik                                                                          AS kasutaja,
                         (SELECT ametnik
                          FROM ou.userid
                          WHERE rekvid = j.rekvid
                            AND kasutaja = (d.history -&gt; 0 -&gt;&gt; 'user')::VARCHAR(120) LIMIT 1)::VARCHAR(120) AS koostaja,
                        (j.properties-&gt;&gt;'vn')::varchar(10) as vn
                  FROM docs.doc d
                           INNER JOIN libs.library l ON l.id = d.doc_type_id
                           INNER JOIN docs.journal j ON j.parentId = d.id
                           INNER JOIN ou.userid u ON u.id = $2 :: INTEGER
                           LEFT OUTER JOIN docs.journalid jid ON j.Id = jid.journalid
                           LEFT OUTER JOIN libs.library s ON s.library = 'STATUS' AND s.kood = d.status :: TEXT
                           LEFT OUTER JOIN libs.asutus AS asutus ON asutus.id = j.asutusId
                  WHERE d.id = $1</sql>
    <sqlAsNew>SELECT $1 :: INTEGER                                 AS id,
                              to_char(now(), 'DD.MM.YYYY HH:MM:SS') :: TEXT AS created,
                              to_char(now(), 'DD.MM.YYYY HH:MM:SS') :: TEXT AS lastupdate,
                              NULL :: TEXT []                               AS bpm,
                              'JOURNAL'                                     AS doc,
                              'JOURNAL'                                     AS doc_type_id,
                              ''                                            AS status,
                              0                                             AS doc_status,
                              0 :: INTEGER                               AS number,
                              0 :: INTEGER                               AS rekvId,
                              now() :: DATE                                 AS kpv,
                              0 :: INTEGER                               AS asutusid,
                              '' :: VARCHAR(120)                          AS dok,
                              '' :: TEXT                                  AS selg,
                              NULL :: TEXT                                  AS muud,
                              '' :: VARCHAR(254)                           AS objekt,
                              0 :: NUMERIC                                  AS summa,
                              '' :: VARCHAR(20)                           AS regkood,
                              '' :: VARCHAR(254)                          AS asutus,
                              '' :: VARCHAR(120)                          AS kasutaja,
                              '' :: VARCHAR(120)                          AS koostaja,
                              null::varchar(10) as vn</sqlAsNew>
    <query />
    <multiple>false</multiple>
    <alias>row</alias>
  </select>
  <select>
    <sql>SELECT j1.*, $2 :: INTEGER AS userid, 1 :: NUMERIC AS kuurs, 'EUR' :: VARCHAR(20) AS valuuta
                  FROM docs.journal1 AS j1
                           INNER JOIN docs.journal j ON j.id = j1.parentId
                           INNER JOIN ou.userid u ON u.id = $2 :: INTEGER
                  WHERE j.parentid = $1
                    AND j1.summa &lt;&gt; 0
                      ORDER BY j1.id DESC</sql>
    <query />
    <multiple>true</multiple>
    <alias>details</alias>
  </select>
  <select>
    <sql>SELECT d.*
                  FROM docs.get_relative_docs($1::INTEGER) d
                           INNER JOIN ou.userid u ON u.id = $2 :: INTEGER</sql>
    <query />
    <multiple>true</multiple>
    <alias>relations</alias>
  </select>
  <select>
    <sql>SELECT *
                  FROM libs.asutus
                  WHERE regkood = $1
                      ORDER BY staatus
                      LIMIT 1</sql>
    <query />
    <multiple>false</multiple>
    <alias>validate_asutus</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>select docs.sp_kooperi_journal($1::integer, $2::integer, $3::date) as result</sql>
    <query />
    <multiple>false</multiple>
    <alias>kooperi_journal</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>select docs.sp_lausendikontrol($1::JSONB) as result</sql>
    <query />
    <multiple>false</multiple>
    <alias>validate_journal</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>SELECT result AS id, result, error_message, $2::integer as userId, $3::integer as rekvId
                   FROM docs.sp_import_from_virasoft($1::JSONB)</sql>
    <query />
    <multiple>false</multiple>
    <alias>importDok</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>SELECT result AS id, result, error_message
                  FROM docs.updateDocLinks($1::integer, $2::integer,$3::JSONB, $4::JSONB)</sql>
    <query />
    <multiple>false</multiple>
    <alias>updateDocLinks</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>
                with
                    params as (
                                  select
                                      lapsed.get_laps_from_viitenumber($1::TEXT)     as laps_id,
                                      lapsed.get_rekv_id_from_viitenumber($1:: TEXT) as rekv_id
                    )
                SELECT
                    l.id,
                    l.nimi::varchar(254) as lapse_nimi
                FROM
                    lapsed.laps l,
                    params      p
                where
                      l.id = p.laps_id
                  and exists
                      (
                          select
                              id
                          from
                              lapsed.lapse_kaart lk,
                              params             p
                          where
                                lk.parentid = p.laps_id
                            and lk.rekvid = p.rekv_id
                      )
                  and l.staatus &lt; 3</sql>
    <query />
    <multiple>false</multiple>
    <alias>validateLaps</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <selectAsLibs>
    <sql></sql>
    <alias>selectAsLibs</alias>
  </selectAsLibs>
  <saveDoc>
    <sql>select docs.sp_salvesta_journal($1::json, $2::integer, $3::integer) as id</sql>
    <alias>saveDoc</alias>
  </saveDoc>
  <deleteDoc>
    <sql>SELECT error_code, result, error_message
                FROM docs.sp_delete_journal($1::INTEGER, $2::INTEGER)</sql>
    <alias>deleteDoc</alias>
  </deleteDoc>
  <requiredFields>
    <validate>kpv,selg,summa</validate>
  </requiredFields>
  <executeSql>
    <sql></sql>
    <alias></alias>
  </executeSql>
  <executeCommand>
    <sql>SELECT result, error_code, error_message, data
                  FROM sp_execute_task($1 :: INTEGER, $2 :: JSON, $3 :: TEXT)</sql>
    <alias>executeTask</alias>
  </executeCommand>
  <register>
    <sql>UPDATE docs.doc
                  SET status = 1
                  WHERE id = $1</sql>
    <alias>registrateDoc</alias>
  </register>
  <endProcess>
    <sql>UPDATE docs.doc SET status = 2 WHERE id = $1</sql>
    <alias>end</alias>
  </endProcess>
  <generateJournal>
    <sql />
    <alias />
  </generateJournal>
  <print></print>
  <getLog>
    <sql>SELECT ROW_NUMBER() OVER ()                                                                        AS id,
                         (ajalugu -&gt;&gt; 'user')::VARCHAR(20)                                                           AS kasutaja,
                         coalesce(to_char((ajalugu -&gt;&gt; 'created')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS koostatud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'updated')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS muudatud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'print')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS prinditud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'email')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'), '')::VARCHAR(20) AS
                                                                                                                        email,
                         coalesce(to_char((ajalugu -&gt;&gt; 'earve')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS earve,
                         coalesce(to_char((ajalugu -&gt;&gt; 'deleted')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS kustutatud
                  FROM (
                           SELECT jsonb_array_elements(history) AS ajalugu, d.id, d.rekvid
                           FROM docs.doc d,
                                ou.userid u
                           WHERE d.id = $1
                             AND u.id = $2
                       ) qry</sql>
    <alias>getLogs</alias>
  </getLog>
</VFPData>
