<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
  <grid>
    <sql>select
                        a.*,
                        $2::integer as userId
                    from
                        palk.cur_puudumine a
                    where
                        rekvid = $1</sql>
    <alias>curPuudumine</alias>
  </grid>
  <select>
    <sql>SELECT
                  $2 :: INTEGER                                                            AS userid,
                  'PUUDUMINE'                                                              AS doc_type_id,
                  p.id,
                  p.lepingid,
                  p.libid,
                  p.summa,
                  p.kpv1,
                  p.kpv2,
                  p.paevad,
                  coalesce((p.properties -&gt;&gt; 'arvestatud_paevad')::integer, p.paevad)      as arvestatud_paevad,
                  p.puudumiste_liik::varchar(20),
                  p.tyyp,
                  p.status,
                  p.muud,
                  t.parentid,
                  coalesce((p.properties -&gt;&gt; 'palk_oper_id')::integer, 0)::integer         as palk_oper_id,
                  (p.properties -&gt;&gt; 'algorithm')::varchar(100)                             as algorithm,
                  (p.properties -&gt;&gt; 'amet')::varchar(254)                                  as amet,
                  coalesce((p.properties -&gt;&gt; 'summa')::numeric,0)::numeric                 as puhkuse_summa ,
                  (p.properties -&gt;&gt; 'avg_paeva_summa')::numeric                            as avg_paeva_summa,
                  (p.properties -&gt;&gt; 'arv_paevad_perioodis')::integer                       as arv_paevad_perioodis,
                  p.properties -&gt;&gt; 'selg'                                                  as selg,
                  coalesce((p.properties -&gt;&gt; 'konto'),'')::varchar(20)                                  as konto,
                  (p.properties -&gt;&gt; 'allikas')::varchar(20)                                as allikas,
                  (p.properties -&gt;&gt; 'tegev')::varchar(20)                                  as tegev,
                  (p.properties -&gt;&gt; 'artikkel')::varchar(20)                               as artikkel,
                  (p.properties -&gt;&gt; 'tunnus')::varchar(20)                                 as tunnus,
                  (p.properties -&gt;&gt; 'kpv1')::date                                          as params_kpv1,
                  (p.properties -&gt;&gt; 'kpv2')::date                                          as params_kpv2,
                  (p.properties -&gt;&gt; 'vm_kpv')::date                                        as params_vm_kpv,
                  coalesce((p.properties -&gt;&gt; 'kas_arvesta_parandus')::integer, 0)::integer as kas_arvesta_parandus,
                  pt.vs_kooded,
                  pt.eesti                                                                 as pt_nimetus
              FROM
                  palk.puudumine                               p
                      inner join      palk.tooleping           t on t.id = p.lepingid
                      left outer join palk.com_puudumiste_tyyp pt on pt.liik = p.puudumiste_liik and pt.id = p.tyyp
              WHERE
                  p.id = $1</sql>
    <sqlAsNew>SELECT
                      $1 :: INTEGER        AS id,
                      $2 :: INTEGER        AS userid,
                      'PUUDUMINE'        AS doc_type_id,
                      0::integer          as parentid,
                      0 :: INTEGER        AS lepingid,
                      0 :: INTEGER        AS libid,
                      0 :: NUMERIC(14, 4) AS summa,
                      now()::date as kpv1,
                      now()::date as kpv2,
                      0::integer as paevad,
                      'PUHKUS'::varchar(20) as puudumiste_liik,
                      0 as tyyp,
                      1 as status,
                      null::integer as palk_oper_id,
                      0::integer as kas_arvesta_parandus,
                      null::date                                          as params_kpv1,
                      null::date                                          as params_kpv2,
                      null::date                                        as params_vm_kpv,                      
                      null::text as muud</sqlAsNew>
    <query />
    <multiple>false</multiple>
    <alias>row</alias>
  </select>
  <select>
    <sql>select
                      id,
                      liik::varchar(20),
                      eesti::varchar(120),
                      vene::varchar(120)
                  from
                      palk.com_puudumiste_tyyp
                  where
                      kas_kehtiv</sql>
    <query />
    <multiple>true</multiple>
    <alias>com_puudumised</alias>
  </select>
  <select>
    <sql>SELECT *
                  FROM
                      jsonb_to_recordset((
                                             SELECT
                                                 p.data
                                             from
                                                 palk.sp_import_puudumine_from_virosoft($2::integer, $3::integer,
                                                                                        $1::JSONB) p
                                         )
                      )
                          AS x (error_message TEXT, error_code INTEGER, result INTEGER)</sql>
    <query />
    <multiple>false</multiple>
    <alias>importDok</alias>
  </select>
  <select>
    <sql>select *
                  from
                      palk.calc_avg_income_vacation($1::INTEGER, $2:: JSON) a
                  order by
                      a.puhkuse_summa desc, a.avg_paeva_summa desc</sql>
    <query />
    <multiple>false</multiple>
    <alias>arvutaKeskPalk</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>select *
                  from
                      palk.gen_puhkuse_oper($1::INTEGER, $2:: JSONB) </sql>
    <query />
    <multiple>false</multiple>
    <alias>genPuhkuseOper</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>select *
                  from
                      palk.arvuta_keskpalga_period($1:: JSONB) a</sql>
    <query />
    <multiple>false</multiple>
    <alias>arvutaKeskPalgaPeriod</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>WITH
                      json_data AS (
                                       SELECT
                                           (p.properties -&gt; 'data' -&gt; 'lisa')::jsonb as data
                                       from
                                           palk.puudumine p
                                       where
                                           id = $1
                                   ),
                      expanded_data AS (
                                       SELECT
                                           array_agg((elem -&gt;&gt; 'period')) over () as periods,
                                           sum(coalesce((elem -&gt;&gt; 'summa')::numeric,0)::numeric) over ()          as summa_kokku,
                                           sum(coalesce((elem -&gt;&gt; 'toopaevad')::integer,0)) over ()      as toopaevad_kokku,
                                           sum(coalesce((elem -&gt;&gt; 'kalendripaevad')::integer,0)) over () as kalendripaevad_kokku,
                                           sum(coalesce((elem -&gt;&gt; 'puhad')::integer,0)) over ()          as puhad_kokku,                                           
                                           (elem -&gt;&gt; 'konto')::varchar(20)        as konto,
                                           (elem -&gt;&gt; 'summa')::numeric            as summa,
                                           (elem -&gt;&gt; 'period')                    as period,
                                           (elem -&gt;&gt; 'toopaevad')::integer        as toopaevad,
                                           (elem -&gt;&gt; 'kalendripaevad')::integer   as kalendripaevad,
                                           (elem -&gt;&gt; 'puhad')::integer            as puhad
                                       FROM
                                           json_data,
                                           jsonb_array_elements(json_data.data) as elem
                                   ),
                      data as (
                                       SELECT
                                           'Period'::varchar(20)                                                 as nimetus,
                                           MAX(CASE WHEN period = periods[1] THEN period::text END)::varchar(20) as &#34;period_01&#34;,
                                           MAX(CASE WHEN period = periods[2] THEN period::text END)::varchar(20) as &#34;period_02&#34;,
                                           MAX(CASE WHEN period = periods[3] THEN period::text END)::varchar(20) as &#34;period_03&#34;,
                                           MAX(CASE WHEN period = periods[4] THEN period::text END)::varchar(20) as &#34;period_04&#34;,
                                           MAX(CASE WHEN period = periods[5] THEN period::text END)::varchar(20) as &#34;period_05&#34;,
                                           MAX(CASE WHEN period = periods[6] THEN period::text END)::varchar(20) as &#34;period_06&#34;,
                                           '' as kokku
                                       FROM
                                           expanded_data
                                       union all
                                       SELECT
                                           'Summa'::varchar(20)                                                 as nimetus,
                                           MAX(CASE WHEN period = periods[1] THEN round(summa,2)::text END)::varchar(20) as &#34;01&#34;,
                                           MAX(CASE WHEN period = periods[2] THEN round(summa,2)::text END)::varchar(20) as &#34;02&#34;,
                                           MAX(CASE WHEN period = periods[3] THEN round(summa,2)::text END)::varchar(20) as &#34;03&#34;,
                                           MAX(CASE WHEN period = periods[4] THEN round(summa,2)::text END)::varchar(20) as &#34;04&#34;,
                                           MAX(CASE WHEN period = periods[5] THEN round(summa,2)::text END)::varchar(20) as &#34;05&#34;,
                                           MAX(CASE WHEN period = periods[6] THEN round(summa,2)::text END)::varchar(20) as &#34;06&#34;,
                                           max(round(summa_kokku,2))::text as kokku
                                       FROM
                                           expanded_data
                                       UNION ALL
                                       SELECT
                                           'Toopaevad' ::varchar(20)                                                as nimetus,
                                           MAX(CASE WHEN period = periods[1] THEN toopaevad::text END)::varchar(20) as &#34;01&#34;,
                                           MAX(CASE WHEN period = periods[2] THEN toopaevad::text END)::varchar(20) as &#34;02&#34;,
                                           MAX(CASE WHEN period = periods[3] THEN toopaevad::text END)::varchar(20) as &#34;03&#34;,
                                           MAX(CASE WHEN period = periods[4] THEN toopaevad::text END)::varchar(20) as &#34;04&#34;,
                                           MAX(CASE WHEN period = periods[5] THEN toopaevad::text END)::varchar(20) as &#34;05&#34;,
                                           MAX(CASE WHEN period = periods[6] THEN toopaevad::text END)::varchar(20) as &#34;06&#34;,
                                           max(toopaevad_kokku)::text as kokku
                                       FROM
                                           expanded_data
                                       UNION ALL
                                       SELECT
                                           'Kalendripaeevad'::varchar(20)                                                as nimetus,
                                           MAX(CASE WHEN period = periods[1] THEN kalendripaevad::text END)::varchar(20) as &#34;01&#34;,
                                           MAX(CASE WHEN period = periods[2] THEN kalendripaevad::text END)::varchar(20) as &#34;02&#34;,
                                           MAX(CASE WHEN period = periods[3] THEN kalendripaevad::text END)::varchar(20) as &#34;03&#34;,
                                           MAX(CASE WHEN period = periods[4] THEN kalendripaevad::text END)::varchar(20) as &#34;04&#34;,
                                           MAX(CASE WHEN period = periods[5] THEN kalendripaevad::text END)::varchar(20) as &#34;05&#34;,
                                           MAX(CASE WHEN period = periods[6] THEN kalendripaevad::text END)::varchar(20) as &#34;06&#34;,
                                           max(kalendripaevad_kokku)::text as kokku
                                       FROM
                                           expanded_data
                                       UNION ALL
                                       SELECT
                                           'Puhad'::varchar(20)                                                 as nimetus,
                                           MAX(CASE WHEN period = periods[1] THEN puhad::text END)::varchar(20) as &#34;01&#34;,
                                           MAX(CASE WHEN period = periods[2] THEN puhad::text END)::varchar(20) as &#34;02&#34;,
                                           MAX(CASE WHEN period = periods[3] THEN puhad::text END)::varchar(20) as &#34;03&#34;,
                                           MAX(CASE WHEN period = periods[4] THEN puhad::text END)::varchar(20) as &#34;04&#34;,
                                           MAX(CASE WHEN period = periods[5] THEN puhad::text END)::varchar(20) as &#34;05&#34;,
                                           MAX(CASE WHEN period = periods[6] THEN puhad::text END)::varchar(20) as &#34;06&#34;,
                                           max(puhad_kokku)::text as kokku                                           
                                       FROM
                                           expanded_data
                                   )
                  select
                      d.nimetus,
                      coalesce(d.period_01, '')::varchar(20) as period_01,
                      coalesce(d.period_02, '')::varchar(20) as period_02,
                      coalesce(d.period_03, '')::varchar(20) as period_03,
                      coalesce(d.period_04, '')::varchar(20) as period_04,
                      coalesce(d.period_05, '')::varchar(20) as period_05,
                      coalesce(d.period_06, '')::varchar(20) as period_06,
                      coalesce(d.kokku, '')::varchar(20) as kokku
                  from
                      data d
            </sql>
    <query />
    <multiple>true</multiple>
    <alias>getArvestuseDetails</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>select *
                  from
                      palk.arvuta_puudumise_paevad($1:: JSONB) a</sql>
    <query />
    <multiple>false</multiple>
    <alias>arvutaPuudumisePaevad</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>select
                      x.kpv1,
                      x.kpv2,
                      x.paevad,
                      case
                          when x.toopaevad is null then
                              palk.get_work_days(jsonb_build_object('kuu', extract(month from x.kpv1),
                                                                    'aasta', extract(year from x.kpv1),
                                                                    'paev', extract(day from x.kpv1),
                                                                    'lopp', extract(day from x.kpv2)) :: JSON)
                          else x.toopaevad end::integer as toopaevad,
                      x.summa::numeric(12, 2),
                      x.alus,
                      x.palk_oper_id,
                      coalesce(x.deleted, '0')          as deleted,
                      $2 :: INTEGER                     AS userid
                  from
                      jsonb_to_recordset(
                              coalesce(
                                      (
                                          select
                                              properties -&gt; 'pk'
                                          from
                                              palk.puudumine p
                                          where
                                                p.id = $1
                                            and p.properties -&gt;&gt; 'pk' is not null
                                      ), '[]'::jsonb || jsonb_build_object(
                                      'kpv1', null::date, 'kpv2', null::date, 'paevad', 0, 'toopaevad', 0, 'summa', 0,
                                      'alus', null, 'palk_oper_id', 0, 'deleted', '1')
                              )
                      ) as x(
                             kpv1 date, kpv2 date, paevad integer, toopaevad integer, summa numeric(12, 2), alus text,
                             palk_oper_id integer, deleted varchar(1))
            </sql>
    <query />
    <multiple>true</multiple>
    <alias>details</alias>
  </select>
  <selectAsLibs>
    <sql></sql>
    <alias>selectAsLibs</alias>
  </selectAsLibs>
  <saveDoc>
    <sql>select palk.sp_salvesta_puudumine($1::json, $2::integer, $3::integer) as id</sql>
    <alias>saveDoc</alias>
  </saveDoc>
  <deleteDoc>
    <sql>select
                    error_code,
                    result,
                    error_message
                from
                    palk.sp_delete_puudumine($1, $2)</sql>
    <alias>deleteDoc</alias>
  </deleteDoc>
  <requiredFields>
    <validate>puudumiste_liik,tyyp,lepingid,kpv1,kpv2,paev,summa</validate>
  </requiredFields>
  <executeSql>
    <sql></sql>
    <alias></alias>
  </executeSql>
  <executeCommand>
    <sql>select
                      error_code,
                      result,
                      error_message
                  from
                      palk.sp_calc_puhkuse_paevad($1, $2)</sql>
    <alias>calcPuhkusePaevad</alias>
  </executeCommand>
  <register>
    <sql></sql>
    <alias></alias>
  </register>
  <endProcess>
    <sql />
    <alias />
  </endProcess>
  <generateJournal>
    <sql />
    <alias />
  </generateJournal>
  <print></print>
  <getLog>
    <sql>SELECT
                      ROW_NUMBER() OVER ()                                                                        AS id,
                      (qry.ajalugu -&gt;&gt; 'user')::VARCHAR(20)                                                       AS kasutaja,
                      coalesce(to_char((ajalugu -&gt;&gt; 'created')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                               '')::VARCHAR(20)                                                                   AS koostatud,
                      coalesce(to_char((ajalugu -&gt;&gt; 'updated')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                               '')::VARCHAR(20)                                                                   AS muudatud,
                      coalesce(to_char((ajalugu -&gt;&gt; 'print')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                               '')::VARCHAR(20)                                                                   AS prinditud,
                      coalesce(to_char((ajalugu -&gt;&gt; 'email')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'), '')::VARCHAR(20) AS
                                                                                                                     email,
                      coalesce(to_char((ajalugu -&gt;&gt; 'earve')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                               '')::VARCHAR(20)                                                                   AS earve,
                      coalesce(to_char((ajalugu -&gt;&gt; 'deleted')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                               '')::VARCHAR(20)                                                                   AS kustutatud
                  FROM
                      (
                          SELECT
                              jsonb_array_elements('[]'::jsonb || d.ajalugu) AS ajalugu,
                              d.id
                          FROM
                              palk.puudumine d,
                              ou.userid      u
                          WHERE
                                d.id = $1
                            AND u.id = $2
                      ) qry
                  WHERE
                      (qry.ajalugu -&gt;&gt; 'user') IS NOT NULL
        </sql>
    <alias>getLogs</alias>
  </getLog>
</VFPData>
