<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
  <grid>
    <sql>SELECT a.*, $2::INTEGER AS userId, a.kehtivus AS valid
                    FROM cur_asutused a
                    WHERE libs.check_asutus(a.id::INTEGER, $1::INTEGER)</sql>
    <alias>curAsutused</alias>
  </grid>
  <select>
    <sql>SELECT h.id,
                     h.hooldajaid,
                     h.isikid,
                     h.kohtumaarus,
                     h.algkpv,
                     h.loppkpv,
                     coalesce(h.muud,'') as muud,
                     $2::INTEGER AS user_id
              FROM hooldekodu.hooldaja h
              WHERE id = $1</sql>
    <sqlAsNew>select $1::integer as id , $2::integer as userid, 
            'HOOLDAJA' as doc_type_id,
            0::integer AS hooldajaid,
            0::integer AS isikid,
            ''::text as  kohtumaarus,
            make_date(year(current_date),01,01)::date  as algkpv,
            make_date(year(current_date),12,31)::date  as loppkpv,
            null::text as muud</sqlAsNew>
    <query />
    <multiple>false</multiple>
    <alias>row</alias>
  </select>
  <selectAsLibs>
    <sql></sql>
    <alias>selectAsLibs</alias>
  </selectAsLibs>
  <saveDoc>
    <sql>select hooldekodu.sp_salvesta_hooldaja($1::jsonb, $2::integer, $3::integer) as id</sql>
    <alias>saveDoc</alias>
  </saveDoc>
  <deleteDoc>
    <sql>SELECT error_code, result, error_message
                FROM hooldekodu.sp_delete_hooldaja($1::INTEGER, $2::INTEGER)</sql>
    <alias>deleteDoc</alias>
  </deleteDoc>
  <requiredFields>
    <validate>hooldajaid,isikid</validate>
  </requiredFields>
  <executeSql>
    <sql></sql>
    <alias></alias>
  </executeSql>
  <executeCommand>
    <sql></sql>
    <alias></alias>
  </executeCommand>
  <register>
    <sql></sql>
    <alias></alias>
  </register>
  <endProcess>
    <sql />
    <alias />
  </endProcess>
  <generateJournal>
    <sql />
    <alias />
  </generateJournal>
  <print></print>
  <getLog>
    <sql>SELECT ROW_NUMBER() OVER ()              AS id,
                         (ajalugu -&gt;&gt; 'user')::VARCHAR(20) AS kasutaja,
                         coalesce(to_char((ajalugu -&gt;&gt; 'created')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)         AS koostatud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'updated')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)         AS muudatud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'print')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)         AS prinditud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'deleted')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)         AS kustutatud

                  FROM (
                           SELECT jsonb_array_elements('[]'::JSONB || d.ajalugu::JSONB) AS ajalugu, d.id
                           FROM libs.asutus d,
                                ou.userid u
                           WHERE d.id = $1
                             AND u.id = $2
                       ) qry
                  WHERE (ajalugu -&gt;&gt; 'user') IS NOT NULL</sql>
    <alias>getLogs</alias>
  </getLog>
</VFPData>
