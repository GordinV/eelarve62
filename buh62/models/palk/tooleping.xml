<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
  <grid>
    <sql>SELECT a.*, $2::INTEGER AS userId
                    FROM palk.cur_toolepingud a
                    WHERE (rekvid = $1 OR rekvid IS NULL)</sql>
    <alias>curToolepingud</alias>
  </grid>
  <select>
    <sql>SELECT
                  $2 :: INTEGER                                                 AS userid,
                  t.id,
                  t.parentid,
                  'TOOLEPING'                                                   AS doc_type_id,
                  t.osakondid,
                  t.ametid,
                  t.algab,
                  t.lopp,
--                  t.palk,
                  case
                      when t.palgamaar is not null and t.properties -&gt;&gt; 'ameti_klassif' is not null
                          and len(t.properties -&gt;&gt; 'ameti_klassif') &gt; 1 then
                          palk.get_isiku_pohipalk(jsonb_build_object('ameti_klassif', t.properties -&gt;&gt; 'ameti_klassif',
                                                                     'palgamaar', t.palgamaar))
                      else t.palk
                      end::numeric(12, 2)                                       as palk,
                  (
                      select
                          kuu_summa
                      from
                          libs.proj_laiendus          pl
                              inner join libs.library p on p.id = pl.proj_id
                      where
                            leping_id = t.id
                        and (p.properties::JSONB -&gt;&gt; 'proj_kuni')::DATE &gt;= current_date
                        and p.kood in (
                                          select
                                              l.properties::JSONB -&gt;&gt; 'proj'
                                          from
                                              palk.palk_kaart             pk
                                                  inner join libs.library l on l.id = pk.libid
                                          where
                                                pk.lepingid = t.id
                                            and l.properties::JSONB -&gt;&gt; 'proj' is not null
                                      )
                      order by (p.properties::jsonb -&gt;&gt; 'proj_alates')::date desc
                      limit 1
                  )                                                             as projekt_palk,
                  t.palgamaar,
                  t.pohikoht,
                  t.ametnik,
                  t.tasuliik,
                  t.muud,
                  t.rekvid,
                  t.resident,
                  t.riik,
                  t.toend,
                  t.koormus,
                  t.toopaev,
                  t.pank,
                  coalesce((t.properties -&gt;&gt; 'kuupalk')::INTEGER, 0)            AS kuupalk,
                  coalesce((t.properties -&gt;&gt; 'ameti_klassif')::varchar(20), '') AS ameti_klassif
              FROM
                  palk.tooleping t
              WHERE
                  t.id = $1</sql>
    <sqlAsNew>SELECT
                       $1::INTEGER           AS id,
                       $2 :: INTEGER         AS userid,
                       0::INTEGER            AS parentid,
                       'TOOLEPING'           AS doc_type_id,
                       0 :: INTEGER          AS osakondid,
                       0 :: INTEGER          AS ametid,
                       now() :: DATE         AS algab,
                       NULL :: DATE          AS lopp,
                       0 :: NUMERIC(12, 4)   AS palk,
                       null::numeric(12,2) as projekti_palk,
                       0 :: INTEGER          AS palgamaar,
                       1                     AS pohikoht,
                       0                     AS ametnik,
                       1                     AS tasuliik,
                       --astmepalk
                       NULL :: TEXT          AS muud,
                       (
                           SELECT
                               rekvid
                           FROM
                               ou.userid
                           WHERE
                               id = $2
                       )                     AS rekvid,
                       1                     AS resident,
                       NULL :: VARCHAR(2)    AS riik,
                       NULL :: DATE          AS toend,
                       100 :: NUMERIC(12, 4) AS koormus,
                       'EUR'::VARCHAR(20)    AS valuuta,
                       1::NUMERIC(12, 4)     AS kuurs,
                       0::INTEGER            AS pank,
                       0::INTEGER            AS kuupalk,
                       ''::varchar(20)       as ameti_klassif,
                       8 :: NUMERIC(12, 4)   AS toopaev</sqlAsNew>
    <query />
    <multiple>false</multiple>
    <alias>row</alias>
  </select>
  <selectAsLibs>
    <sql>SELECT *
                   FROM palk.com_toolepingud a
                   WHERE rekvid = $1 </sql>
    <alias>selectAsLibs</alias>
  </selectAsLibs>
  <saveDoc>
    <sql>select palk.sp_salvesta_tooleping($1, $2, $3) as id</sql>
    <alias>saveDoc</alias>
  </saveDoc>
  <deleteDoc>
    <sql>SELECT error_code, result, error_message
                FROM palk.sp_delete_tooleping($1, $2)</sql>
    <alias>deleteDoc</alias>
  </deleteDoc>
  <requiredFields>
    <validate>osakondid,tasuliik,algab,ametid</validate>
  </requiredFields>
  <executeSql>
    <sql></sql>
    <alias></alias>
  </executeSql>
  <executeCommand>
    <sql></sql>
    <alias></alias>
  </executeCommand>
  <register>
    <sql></sql>
    <alias></alias>
  </register>
  <endProcess>
    <sql />
    <alias />
  </endProcess>
  <generateJournal>
    <sql />
    <alias />
  </generateJournal>
  <print></print>
  <getLog>
    <sql>SELECT ROW_NUMBER() OVER ()                  AS id,
                         (qry.ajalugu -&gt;&gt; 'user')::VARCHAR(20) AS kasutaja,
                         coalesce(to_char((qry.ajalugu -&gt;&gt; 'created')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)             AS koostatud,
                         coalesce(to_char((qry.ajalugu -&gt;&gt; 'updated')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)             AS muudatud,
                         coalesce(to_char((qry.ajalugu -&gt;&gt; 'print')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)             AS prinditud,
                         coalesce(to_char((qry.ajalugu -&gt;&gt; 'email')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)             AS
                                                                  email,
                         coalesce(to_char((qry.ajalugu -&gt;&gt; 'earve')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)             AS earve,
                         coalesce(to_char((qry.ajalugu -&gt;&gt; 'deleted')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)             AS kustutatud
                  FROM (
                           SELECT jsonb_array_elements('[]'::JSONB || d.ajalugu) AS ajalugu, d.id
                           FROM palk.tooleping d,
                                ou.userid u
                           WHERE d.id = $1
                             AND u.id = $2
                       ) qry
                  WHERE (qry.ajalugu -&gt;&gt; 'user') IS NOT NULL</sql>
    <alias>getLogs</alias>
  </getLog>
</VFPData>
