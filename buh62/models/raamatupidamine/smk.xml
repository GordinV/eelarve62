<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
  <grid>
    <sql>SELECT mk.id,
                           mk.kpv,
                           mk.selg,
                           mk.nimetus,
                           mk.kood,
                           mk.rekvid,
                           mk.deebet,
                           mk.kreedit,
                           mk.number,
                           mk.journalid,
                           mk.aa,
                           mk.journalnr,
                           mk.opt,
                           mk.regkood,
                           0 AS valitud,
                           mk.maksepaev
                    FROM cur_pank mk
                    WHERE mk.rekvId = $1
                      AND coalesce(docs.usersRigths(mk.id, 'select', $2::INTEGER), TRUE)</sql>
    <alias>curMk</alias>
  </grid>
  <select>
    <sql>SELECT d.id,
                         d.docs_ids,
                         (to_char(created, 'DD.MM.YYYY HH:MM:SS')) :: TEXT              AS created,
                         (to_char(lastupdate, 'DD.MM.YYYY HH:MM:SS')) :: TEXT           AS lastupdate,
                         d.bpm,
                         trim(l.nimetus)                                                AS doc,
                         trim(l.kood)                                                   AS doc_type_id,
                         trim(s.nimetus)                                                AS status,
                         k.number                                                       AS number,
                         k.maksepaev                                                    AS maksepaev,
                         k.viitenr,
                         k.aaid                                                         AS aa_id,
                         aa.pank                                                        AS pank,
                         trim(aa.arve)::VARCHAR(20)                                     AS omaArve,
                         k.rekvId,
                         k.kpv                                                          AS kpv,
                         k.selg,
                         k.muud,
                         k.opt,
                         k.arvid,
                         k.aaid,
                         ('Number:' || arv.number :: TEXT || ' Kuupäev:' || arv.kpv :: TEXT || ' Jääk:' ||
                          arv.jaak :: TEXT)                                             AS arvnr,
                         (SELECT sum(summa)
                          FROM docs.mk1
                          WHERE parentid = k.id)                                        AS summa,
                         coalesce((dp.details :: JSONB -&gt;&gt; 'konto'), '') :: VARCHAR(20) AS konto,
                         dp.selg::VARCHAR(120)                                          AS dokprop,
                         k.doklausid,
                         (d.history -&gt; 0 -&gt;&gt; 'user')::VARCHAR(120)                      AS koostaja

                  FROM docs.doc d
                           INNER JOIN docs.mk k ON k.parentId = d.id
                           INNER JOIN ou.userid u ON u.id = $2 :: INTEGER
                           LEFT OUTER JOIN libs.library l ON l.id = d.doc_type_id
                           LEFT OUTER JOIN libs.library s ON s.library = 'STATUS' AND s.kood = d.status :: TEXT
                           LEFT OUTER JOIN ou.aa AS aa ON k.aaid = aa.Id
                           LEFT OUTER JOIN docs.arv AS arv ON k.arvid = arv.Id
                           LEFT OUTER JOIN libs.dokprop dp ON dp.id = k.doklausid
                  WHERE d.id = $1
                    AND d.status &lt; 3
            </sql>
    <sqlAsNew>SELECT $1 :: INTEGER                                  AS id,
                              $2 :: INTEGER                                  AS userid,
                              to_char(now(), 'DD.MM.YYYY HH:MM:SS') :: TEXT  AS created,
                              to_char(now(), 'DD.MM.YYYY HH:MM:SS') :: TEXT  AS lastupdate,
                              NULL                                           AS bpm,
                              'SMK'                                          AS doc_type_id,
                              docs.sp_get_number(u.rekvid::INTEGER, 'SMK'::TEXT,
                                                 date_part('year', current_date)::INTEGER,
                                                 NULL::INTEGER)::VARCHAR(20) AS number,
                              now() :: DATE                                  AS maksepaev,
                              0                                              AS aaid,
                              trim('')::VARCHAR(20)                          AS pank,
                              NULL::INTEGER                                  AS rekvId,
                              now() :: DATE                                  AS kpv,
                              NULL::VARCHAR(120)                             AS viitenr,
                              NULL::TEXT                                     AS selg,
                              NULL::TEXT                                     AS muud,
                              2                                              AS opt,
                              NULL::VARCHAR(20)                              AS regkood,
                              NULL::VARCHAR(254)                             AS asutus,
                              NULL::INTEGER                                  AS arvid,
                              NULL::VARCHAR(20)                              AS arvnr,
                              0::NUMERIC(12, 2)                              AS summa,
                              NULL::VARCHAR(120)                             AS dokprop,
                              NULL::VARCHAR(20)                              AS konto,
                              0                                              AS doklausid
                       FROM ou.userid u
                       WHERE u.id = $2 :: INTEGER
            </sqlAsNew>
    <query />
    <multiple>false</multiple>
    <alias>row</alias>
  </select>
  <select>
    <sql>with
                      doc as (
                                 SELECT
                                     $2 :: INTEGER                 AS userid,
                                     trim(n.kood)::VARCHAR(20)     AS kood,
                                     trim(n.nimetus)::VARCHAR(254) AS nimetus,
                                     trim(a.nimetus)::VARCHAR(254) AS asutus,
                                     trim(a.aadress)               AS aadress,
                                     k.parentid                    AS parent_id,
                                     k1.*
                                 FROM
                                     docs.mk1 AS                      k1
                                         INNER JOIN docs.mk           k ON k.id = k1.parentId
                                         INNER JOIN libs.nomenklatuur n ON n.id = k1.nomid
                                         INNER JOIN libs.asutus       a ON a.id = k1.asutusid
                                         INNER JOIN ou.userid         u ON u.id = $2 :: INTEGER
                                 WHERE
                                     k.parentid = $1
                             ),
                      lausend as (
                                 SELECT
                                     id,
                                     number,
                                     kpv,
                                     rekvid,
                                     trim(array_agg(lausend)::TEXT, '{}&#34;') AS lausend
                                 FROM
                                     (
                                         SELECT
                                             j.id,
                                             jid.number,
                                             j.kpv,
                                             j.rekvid,
                                             ('D ' || ltrim(rtrim(j1.deebet)) || ' ' ||
                                              'K ' || ltrim(rtrim(j1.kreedit)) || ' ' ||
                                              ltrim(rtrim(round(j1.summa, 2)::TEXT)) || ' ' ||
                                              'TA ' || ltrim(rtrim(j1.kood1::TEXT)) || ' ' ||
                                              'Allikas ' || ltrim(rtrim(j1.kood2::TEXT)) || ' ' ||
                                              'RV ' || ltrim(rtrim(j1.kood3::TEXT)) || ' ' ||
                                              'Art ' || ltrim(rtrim(j1.kood5::TEXT)))::TEXT AS lausend
                                         FROM
                                             docs.journal                  j
                                                 inner join docs.journal1  j1 on j.id = j1.parentid
                                                 INNER JOIN docs.journalid jid ON j.id = jid.journalid

                                         where
                                             j.parentid in (
                                                               select
                                                                   parent_id
                                                               from
                                                                   doc
                                                           )
                                     ) qry
                                 GROUP BY id, number, kpv, rekvid
                             )
                  select
                      doc.*,
                      coalesce(l.number, 0)   AS lausnr,
                      coalesce(l.lausend, '') AS lausend

                  from
                      doc
                          left outer join lausend l on l.id = doc.journalid</sql>
    <query />
    <multiple>true</multiple>
    <alias>details</alias>
  </select>
  <select>
    <sql>SELECT d.*
                  FROM docs.get_relative_docs($1::INTEGER) d
                           INNER JOIN ou.userid u ON u.id = $2 :: INTEGER</sql>
    <query />
    <multiple>true</multiple>
    <alias>relations</alias>
  </select>
  <selectAsLibs>
    <sql></sql>
    <alias>selectAsLibs</alias>
  </selectAsLibs>
  <saveDoc>
    <sql>select docs.sp_salvesta_mk($1::json, $2::integer, $3::integer) as id</sql>
    <alias>saveDoc</alias>
  </saveDoc>
  <deleteDoc>
    <sql>SELECT error_code, result, error_message
                FROM docs.sp_delete_mk($1::INTEGER, $2::INTEGER)</sql>
    <alias>deleteDoc</alias>
  </deleteDoc>
  <requiredFields>
    <validate>kpv,aaid</validate>
  </requiredFields>
  <executeSql>
    <sql></sql>
    <alias></alias>
  </executeSql>
  <executeCommand>
    <sql></sql>
    <alias></alias>
  </executeCommand>
  <register>
    <sql>UPDATE docs.doc
                  SET status = 1
                  WHERE id = $1</sql>
    <alias />
  </register>
  <endProcess>
    <sql>UPDATE docs.doc
                  SET status = 2
                  WHERE id = $1</sql>
    <alias />
  </endProcess>
  <generateJournal>
    <sql>SELECT error_code, result, error_message
                  FROM docs.gen_lausend_smk($2::INTEGER, $1::INTEGER)</sql>
    <alias>generateJournal</alias>
  </generateJournal>
  <print></print>
  <getLog>
    <sql>SELECT ROW_NUMBER() OVER ()                                                                        AS id,
                         (ajalugu -&gt;&gt; 'user')::VARCHAR(20)                                                           AS kasutaja,
                         coalesce(to_char((ajalugu -&gt;&gt; 'created')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS koostatud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'updated')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS muudatud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'print')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS prinditud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'email')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'), '')::VARCHAR(20) AS
                                                                                                                        email,
                         coalesce(to_char((ajalugu -&gt;&gt; 'earve')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS earve,
                         coalesce(to_char((ajalugu -&gt;&gt; 'deleted')::TIMESTAMP, 'DD.MM.YYYY HH.MI.SS'),
                                  '')::VARCHAR(20)                                                                   AS kustutatud
                  FROM (
                           SELECT jsonb_array_elements(history) AS ajalugu, d.id, d.rekvid
                           FROM docs.doc d,
                                ou.userid u
                           WHERE d.id = $1
                             AND u.id = $2
                       ) qry</sql>
    <alias>getLogs</alias>
  </getLog>
</VFPData>
